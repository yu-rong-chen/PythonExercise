{
	// Place your PlatformTest workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"ut_win_exception": {
		"prefix": "ut_win_exception: copy function under test first",
		"body": [
			"@patch('libraries.core_plugins.ilorest.windows.execute_windows_command')",
			"def test_$CLIPBOARD(self, execute_windows_command):",
				"\tres = ''",
				"\toutput = ''",
				"\texecute_windows_command.return_value = res, output",
				"\twith self.assertRaises(Exception) as context:",
					"\t\tself._windows_serverclone.$CLIPBOARD()",
				"\tmsg = $4",
				"\tself.assertTrue(msg in str(context.exception))",
			""
		],
		"description": "Log output to console"
	},
	"ut_lin_exception": {
		"prefix": "ut_lin_exception: copy function under test first",
		"body": [
			"@patch('libraries.core_plugins.ilorest.linux.LinuxServerClone.$3')",
			"def test_$CLIPBOARD(self, $3):",
				"\tstdout = ''",
				"\tstderr = ''",
				"\t$3.return_value = stdout, stderr",
				"\twith self.assertRaises(Exception) as context:",
					"\t\tself._linux_serverclone.$CLIPBOARD()",
				"\tmsg = $4",
				"\tself.assertTrue(msg in str(context.exception))",
			""
		],
		"description": "Log output to console"
	},
	"ut_win_pass": {
		"prefix": "ut_win_pass: copy function under test first",
		"body": [
			"@patch('libraries.core_plugins.ilorest.windows.execute_windows_command')",
			"def test_$CLIPBOARD(self, execute_windows_command):",
				"\tres = ''",
				"\toutput = ''",
				"\texecute_windows_command.return_value = res, output",
        		"\twith self.assertLogs('RobotFramework', level='INFO') as cm:",
					"\t\tself._windows_serverclone.$CLIPBOARD()",
				"\tmsg = 'INFO:RobotFramework:'$4",
				"\tself.assertTrue(msg in cm.output)",
			""
		],
		"description": "Log output to console"
	},
	"ut_lin_pass": {
		"prefix": "ut_lin_pass: copy function under test first",
		"body": [
			"@patch('libraries.core_plugins.ilorest.linux.LinuxServerClone.$3')",
			"def test_$CLIPBOARD(self, $3):",
				"\tstdout = ''",
				"\tstderr = ''",
				"\t$3.return_value = stdout, stderr",
        		"\twith self.assertLogs('RobotFramework', level='INFO') as cm:",
					"\t\tself._linux_serverclone.$CLIPBOARD()",
				"\tmsg = 'INFO:RobotFramework:'$4",
				"\tself.assertTrue(msg in cm.output)",
			""
		],
		"description": "Log output to console"
	}
}